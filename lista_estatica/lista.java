/**
 * üóÑÔ∏è Demostraci√≥n de un Arreglo (Array) en Java.
 * Un arreglo es una de las estructuras de datos m√°s fundamentales. Podemos
 * imaginarlo como un **archivador con un n√∫mero fijo de cajones numerados**.
 *
 * Caracter√≠sticas Clave:
 * 1. **Tama√±o Fijo:** Una vez que creas el archivador con 4 cajones, no puedes
 * agregar un quinto caj√≥n. Su tama√±o es est√°tico.
 * 2. **Acceso Directo:** Si quieres el contenido del caj√≥n N¬∞ 2, puedes ir
 * directamente a √©l sin abrir los anteriores. Esto es muy r√°pido.
 * 3. **√çndices Basados en Cero:** ¬°Muy importante! La numeraci√≥n de los
 * "cajones"
 * siempre empieza en 0. Un archivador de 4 cajones tendr√° los √≠ndices 0, 1, 2 y
 * 3.
 * 
 */
public class lista {
    public static void main(String[] args) {

        // --- 1. Declaraci√≥n e Inicializaci√≥n ---
        // Aqu√≠ le decimos a Java: "Necesito un archivador nuevo llamado 'nombres'
        // que tendr√° exactamente 4 cajones para guardar Strings".
        String[] nombres = new String[4];

        // --- 2. Asignaci√≥n de Valores ---
        // Ahora, vamos a guardar datos en cada "caj√≥n" usando su n√∫mero de √≠ndice.
        // Recuerda: el primer caj√≥n es el 0.
        nombres[0] = "Ana"; // Guardar en el caj√≥n 0
        nombres[1] = "Juan"; // Guardar en el caj√≥n 1
        nombres[2] = "Mar√≠a"; // Guardar en el caj√≥n 2
        nombres[3] = "Pedro"; // Guardar en el caj√≥n 3

        // --- 3. Acceso a un Elemento Espec√≠fico ---
        // Para leer un dato, simplemente vamos al archivador y abrimos el caj√≥n
        // con el n√∫mero de √≠ndice que queremos. El acceso es instant√°neo.
        System.out.println("El tercer nombre es: " + nombres[2]);

        // --- 4. Recorrer el Arreglo Completo ---
        // Para ver todo lo que hay en el archivador, necesitamos visitar
        // cada caj√≥n, uno por uno, desde el primero hasta el √∫ltimo.
        System.out.println("\nTodos los nombres:");

        // Usamos un bucle 'for' que funciona como un "inspector":
        // - 'int i = 0': El inspector empieza en el caj√≥n 0.
        // - 'i < nombres.length': Continuar√° mientras no se le acaben los cajones
        // (nombres.length es el tama√±o total, en este caso, 4).
        // - 'i++': Despu√©s de revisar un caj√≥n, pasa al siguiente.
        for (int i = 0; i < nombres.length; i++) {
            // Imprimimos el contenido del caj√≥n que el inspector 'i' est√° viendo en este
            // momento.
            System.out.println("- " + nombres[i]);
        }
    }
}